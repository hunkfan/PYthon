# encoding:utf-8
#coding=gbk
# !/usr/bin/env python

"""
-------------算法过程
#
# 1. 随意选择两个大的质数p和q，p不等于q，计算N=pq。
# 2. 根据欧拉函数，不大于N且与N互质的整数個数為(p-1)(q-1)。
# 3. 选择一个整数e与(p-1)(q-1)互质，并且e小于(p-1)(q-1)。
# 4. 用以下这个公式计算d：d× e ≡ 1 (modC= (p-1)(q-1))。
# 5. 将p和q的记录销毁。
#
# (N,e)是公钥，(N,d)是私钥。
"""

def generate_keys(p, q):
    #获取10到50内满足条件的素数
    numbers = range_prime(10, 50)
    # numbers = (11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47)
    N = p * q
    C = (p - 1) * (q - 1)
    e = 0
    for n in numbers:
        #素数n小于C，并且被C除有余数，赋值于公钥e
        if n < C and C % n > 0:
            e = n
            break
    if e == 0:
        raise BaseException("e not found")  # Python3中改为BaseException
    d = 0
    for n in range(2, C):

        if (e * n) % C == 1:
            d = n
            break
    if d == 0:
        raise BaseException("d not found")
    return ((N, e), (N, d))


def range_prime(start, end):
    """检验范围内素数，并返回素数列表
       :param start: 数的开始位置
       :param end: 数的结束位置
       :return: 返回的数据
       """
    l = list()
    for i in range(start, end + 1):
        flag = True
        for j in range(2, i):
            if i % j == 0:
                flag = False
                break
        if flag:
            #print(i)
            l.append(i)
    return l

def encrypt(m, key):
    #加密操作
    N, x = key
    return (m ** x) % N

decrypt = encrypt
if __name__ == '__main__':
    su1 = int(input('请输入一个素数：'))
    su2 = int(input('请输入一个素数：'))
    pub, pri = generate_keys(su1, su2)#47,79
    #print(pub)
    n = int(input('请输入一个正整数：'))#20
    m = int(input('请输入一个正整数：'))#30
    L = list(range(n, m))
    C = [encrypt(x, pub) for x in L]
    D = [decrypt(x, pri) for x in C]
    print("测试结果：")
    print("keys:", pub, pri)
    print("message:", str(L))
    print("encrypt:", C)
    print("decrypt:", D)

